!function(e){function t(t){for(var r,a,i=t[0],l=t[1],c=t[2],d=0,p=[];d<i.length;d++)a=i[d],Object.prototype.hasOwnProperty.call(s,a)&&s[a]&&p.push(s[a][0]),s[a]=0;for(r in l)Object.prototype.hasOwnProperty.call(l,r)&&(e[r]=l[r]);for(u&&u(t);p.length;)p.shift()();return o.push.apply(o,c||[]),n()}function n(){for(var e,t=0;t<o.length;t++){for(var n=o[t],r=!0,i=1;i<n.length;i++){var l=n[i];0!==s[l]&&(r=!1)}r&&(o.splice(t--,1),e=a(a.s=n[0]))}return e}var r={},s={0:0},o=[];function a(t){if(r[t])return r[t].exports;var n=r[t]={i:t,l:!1,exports:{}};return e[t].call(n.exports,n,n.exports,a),n.l=!0,n.exports}a.m=e,a.c=r,a.d=function(e,t,n){a.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},a.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},a.t=function(e,t){if(1&t&&(e=a(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(a.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)a.d(n,r,function(t){return e[t]}.bind(null,r));return n},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="";var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var u=l;o.push([1,1]),n()}([,function(e,t,n){e.exports=n(2)},function(e,t,n){"use strict";n.r(t);var r=n(0),s=function(){function e(e){r.G.call(this,e),this.dracoLoader=null,this.ddsLoader=null,this.ktx2Loader=null,this.pluginCallbacks=[],this.register((function(e){return new i(e)})),this.register((function(e){return new c(e)})),this.register((function(e){return new l(e)})),this.register((function(e){return new o(e)}))}function t(){var e={};return{get:function(t){return e[t]},add:function(t,n){e[t]=n},remove:function(t){delete e[t]},removeAll:function(){e={}}}}e.prototype=Object.assign(Object.create(r.G.prototype),{constructor:e,load:function(e,t,n,s){var o,a=this;o=""!==this.resourcePath?this.resourcePath:""!==this.path?this.path:r.H.extractUrlBase(e),this.manager.itemStart(e);var i=function(t){s?s(t):console.error(t),a.manager.itemError(e),a.manager.itemEnd(e)},l=new r.p(this.manager);l.setPath(this.path),l.setResponseType("arraybuffer"),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(e,(function(n){try{a.parse(n,o,(function(n){t(n),a.manager.itemEnd(e)}),i)}catch(e){i(e)}}),n,i)},setDRACOLoader:function(e){return this.dracoLoader=e,this},setDDSLoader:function(e){return this.ddsLoader=e,this},setKTX2Loader:function(e){return this.ktx2Loader=e,this},register:function(e){return-1===this.pluginCallbacks.indexOf(e)&&this.pluginCallbacks.push(e),this},unregister:function(e){return-1!==this.pluginCallbacks.indexOf(e)&&this.pluginCallbacks.splice(this.pluginCallbacks.indexOf(e),1),this},parse:function(e,t,o,i){var l,c={},d={};if("string"==typeof e)l=e;else if(r.H.decodeText(new Uint8Array(e,0,4))===u){try{c[n.KHR_BINARY_GLTF]=new h(e)}catch(e){return void(i&&i(e))}l=c[n.KHR_BINARY_GLTF].content}else l=r.H.decodeText(new Uint8Array(e));var p=JSON.parse(l);if(void 0===p.asset||p.asset.version[0]<2)i&&i(new Error("THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported."));else{var v=new B(p,{path:t||this.resourcePath||"",crossOrigin:this.crossOrigin,manager:this.manager,ktx2Loader:this.ktx2Loader});v.fileLoader.setRequestHeader(this.requestHeader);for(var b=0;b<this.pluginCallbacks.length;b++){var T=this.pluginCallbacks[b](v);d[T.name]=T,c[T.name]=!0}if(p.extensionsUsed)for(b=0;b<p.extensionsUsed.length;++b){var w=p.extensionsUsed[b],S=p.extensionsRequired||[];switch(w){case n.KHR_MATERIALS_UNLIT:c[w]=new a;break;case n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:c[w]=new g;break;case n.KHR_DRACO_MESH_COMPRESSION:c[w]=new m(p,this.dracoLoader);break;case n.MSFT_TEXTURE_DDS:c[w]=new s(this.ddsLoader);break;case n.KHR_TEXTURE_TRANSFORM:c[w]=new f;break;case n.KHR_MESH_QUANTIZATION:c[w]=new y;break;default:S.indexOf(w)>=0&&void 0===d[w]&&console.warn('THREE.GLTFLoader: Unknown extension "'+w+'".')}}v.setExtensions(c),v.setPlugins(d),v.parse(o,i)}}});var n={KHR_BINARY_GLTF:"KHR_binary_glTF",KHR_DRACO_MESH_COMPRESSION:"KHR_draco_mesh_compression",KHR_LIGHTS_PUNCTUAL:"KHR_lights_punctual",KHR_MATERIALS_CLEARCOAT:"KHR_materials_clearcoat",KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:"KHR_materials_pbrSpecularGlossiness",KHR_MATERIALS_TRANSMISSION:"KHR_materials_transmission",KHR_MATERIALS_UNLIT:"KHR_materials_unlit",KHR_TEXTURE_BASISU:"KHR_texture_basisu",KHR_TEXTURE_TRANSFORM:"KHR_texture_transform",KHR_MESH_QUANTIZATION:"KHR_mesh_quantization",MSFT_TEXTURE_DDS:"MSFT_texture_dds"};function s(e){if(!e)throw new Error("THREE.GLTFLoader: Attempting to load .dds texture without importing DDSLoader");this.name=n.MSFT_TEXTURE_DDS,this.ddsLoader=e}function o(e){this.parser=e,this.name=n.KHR_LIGHTS_PUNCTUAL,this.cache={refs:{},uses:{}}}function a(){this.name=n.KHR_MATERIALS_UNLIT}function i(e){this.parser=e,this.name=n.KHR_MATERIALS_CLEARCOAT}function l(e){this.parser=e,this.name=n.KHR_MATERIALS_TRANSMISSION}function c(e){this.parser=e,this.name=n.KHR_TEXTURE_BASISU}o.prototype._markDefs=function(){for(var e=this.parser,t=this.parser.json.nodes||[],n=0,r=t.length;n<r;n++){var s=t[n];s.extensions&&s.extensions[this.name]&&void 0!==s.extensions[this.name].light&&e._addNodeRef(this.cache,s.extensions[this.name].light)}},o.prototype._loadLight=function(e){var t=this.parser,n="light:"+e,s=t.cache.get(n);if(s)return s;var o,a=t.json,i=((a.extensions&&a.extensions[this.name]||{}).lights||[])[e],l=new r.k(16777215);void 0!==i.color&&l.fromArray(i.color);var c=void 0!==i.range?i.range:0;switch(i.type){case"directional":(o=new r.l(l)).target.position.set(0,0,-1),o.add(o.target);break;case"point":(o=new r.bb(l)).distance=c;break;case"spot":(o=new r.nb(l)).distance=c,i.spot=i.spot||{},i.spot.innerConeAngle=void 0!==i.spot.innerConeAngle?i.spot.innerConeAngle:0,i.spot.outerConeAngle=void 0!==i.spot.outerConeAngle?i.spot.outerConeAngle:Math.PI/4,o.angle=i.spot.outerConeAngle,o.penumbra=1-i.spot.innerConeAngle/i.spot.outerConeAngle,o.target.position.set(0,0,-1),o.add(o.target);break;default:throw new Error('THREE.GLTFLoader: Unexpected light type, "'+i.type+'".')}return o.position.set(0,0,0),o.decay=2,void 0!==i.intensity&&(o.intensity=i.intensity),o.name=t.createUniqueName(i.name||"light_"+e),s=Promise.resolve(o),t.cache.add(n,s),s},o.prototype.createNodeAttachment=function(e){var t=this,n=this.parser,r=n.json.nodes[e],s=(r.extensions&&r.extensions[this.name]||{}).light;return void 0===s?null:this._loadLight(s).then((function(e){return n._getNodeRef(t.cache,s,e)}))},a.prototype.getMaterialType=function(){return r.M},a.prototype.extendParams=function(e,t,n){var s=[];e.color=new r.k(1,1,1),e.opacity=1;var o=t.pbrMetallicRoughness;if(o){if(Array.isArray(o.baseColorFactor)){var a=o.baseColorFactor;e.color.fromArray(a),e.opacity=a[3]}void 0!==o.baseColorTexture&&s.push(n.assignTexture(e,"map",o.baseColorTexture))}return Promise.all(s)},i.prototype.getMaterialType=function(e){var t=this.parser.json.materials[e];return t.extensions&&t.extensions[this.name]?r.P:null},i.prototype.extendMaterialParams=function(e,t){var n=this.parser,s=n.json.materials[e];if(!s.extensions||!s.extensions[this.name])return Promise.resolve();var o=[],a=s.extensions[this.name];if(void 0!==a.clearcoatFactor&&(t.clearcoat=a.clearcoatFactor),void 0!==a.clearcoatTexture&&o.push(n.assignTexture(t,"clearcoatMap",a.clearcoatTexture)),void 0!==a.clearcoatRoughnessFactor&&(t.clearcoatRoughness=a.clearcoatRoughnessFactor),void 0!==a.clearcoatRoughnessTexture&&o.push(n.assignTexture(t,"clearcoatRoughnessMap",a.clearcoatRoughnessTexture)),void 0!==a.clearcoatNormalTexture&&(o.push(n.assignTexture(t,"clearcoatNormalMap",a.clearcoatNormalTexture)),void 0!==a.clearcoatNormalTexture.scale)){var i=a.clearcoatNormalTexture.scale;t.clearcoatNormalScale=new r.sb(i,i)}return Promise.all(o)},l.prototype.getMaterialType=function(e){var t=this.parser.json.materials[e];return t.extensions&&t.extensions[this.name]?r.P:null},l.prototype.extendMaterialParams=function(e,t){var n=this.parser,r=n.json.materials[e];if(!r.extensions||!r.extensions[this.name])return Promise.resolve();var s=[],o=r.extensions[this.name];return void 0!==o.transmissionFactor&&(t.transmission=o.transmissionFactor),void 0!==o.transmissionTexture&&s.push(n.assignTexture(t,"transmissionMap",o.transmissionTexture)),Promise.all(s)},c.prototype.loadTexture=function(e){var t=this.parser,n=t.json,r=n.textures[e];if(!r.extensions||!r.extensions[this.name])return null;var s=r.extensions[this.name],o=n.images[s.source],a=t.options.ktx2Loader;if(!a)throw new Error("THREE.GLTFLoader: setKTX2Loader must be called before loading KTX2 textures");return t.loadTextureImage(e,o,a)};var u="glTF",d=1313821514,p=5130562;function h(e){this.name=n.KHR_BINARY_GLTF,this.content=null,this.body=null;var t=new DataView(e,0,12);if(this.header={magic:r.H.decodeText(new Uint8Array(e.slice(0,4))),version:t.getUint32(4,!0),length:t.getUint32(8,!0)},this.header.magic!==u)throw new Error("THREE.GLTFLoader: Unsupported glTF-Binary header.");if(this.header.version<2)throw new Error("THREE.GLTFLoader: Legacy binary file detected.");for(var s=new DataView(e,12),o=0;o<s.byteLength;){var a=s.getUint32(o,!0);o+=4;var i=s.getUint32(o,!0);if(o+=4,i===d){var l=new Uint8Array(e,12+o,a);this.content=r.H.decodeText(l)}else if(i===p){var c=12+o;this.body=e.slice(c,c+a)}o+=a}if(null===this.content)throw new Error("THREE.GLTFLoader: JSON content not found.")}function m(e,t){if(!t)throw new Error("THREE.GLTFLoader: No DRACOLoader instance provided.");this.name=n.KHR_DRACO_MESH_COMPRESSION,this.json=e,this.dracoLoader=t,this.dracoLoader.preload()}function f(){this.name=n.KHR_TEXTURE_TRANSFORM}function v(e){r.Q.call(this),this.isGLTFSpecularGlossinessMaterial=!0;var t=["#ifdef USE_SPECULARMAP","\tuniform sampler2D specularMap;","#endif"].join("\n"),n=["#ifdef USE_GLOSSINESSMAP","\tuniform sampler2D glossinessMap;","#endif"].join("\n"),s=["vec3 specularFactor = specular;","#ifdef USE_SPECULARMAP","\tvec4 texelSpecular = texture2D( specularMap, vUv );","\ttexelSpecular = sRGBToLinear( texelSpecular );","\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture","\tspecularFactor *= texelSpecular.rgb;","#endif"].join("\n"),o=["float glossinessFactor = glossiness;","#ifdef USE_GLOSSINESSMAP","\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );","\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture","\tglossinessFactor *= texelGlossiness.a;","#endif"].join("\n"),a=["PhysicalMaterial material;","material.diffuseColor = diffuseColor.rgb * ( 1. - max( specularFactor.r, max( specularFactor.g, specularFactor.b ) ) );","vec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );","float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );","material.specularRoughness = max( 1.0 - glossinessFactor, 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.","material.specularRoughness += geometryRoughness;","material.specularRoughness = min( material.specularRoughness, 1.0 );","material.specularColor = specularFactor;"].join("\n"),i={specular:{value:(new r.k).setHex(16777215)},glossiness:{value:1},specularMap:{value:null},glossinessMap:{value:null}};this._extraUniforms=i,this.onBeforeCompile=function(e){for(var r in i)e.uniforms[r]=i[r];e.fragmentShader=e.fragmentShader.replace("uniform float roughness;","uniform vec3 specular;").replace("uniform float metalness;","uniform float glossiness;").replace("#include <roughnessmap_pars_fragment>",t).replace("#include <metalnessmap_pars_fragment>",n).replace("#include <roughnessmap_fragment>",s).replace("#include <metalnessmap_fragment>",o).replace("#include <lights_physical_fragment>",a)},Object.defineProperties(this,{specular:{get:function(){return i.specular.value},set:function(e){i.specular.value=e}},specularMap:{get:function(){return i.specularMap.value},set:function(e){i.specularMap.value=e,e?this.defines.USE_SPECULARMAP="":delete this.defines.USE_SPECULARMAP}},glossiness:{get:function(){return i.glossiness.value},set:function(e){i.glossiness.value=e}},glossinessMap:{get:function(){return i.glossinessMap.value},set:function(e){i.glossinessMap.value=e,e?(this.defines.USE_GLOSSINESSMAP="",this.defines.USE_UV=""):(delete this.defines.USE_GLOSSINESSMAP,delete this.defines.USE_UV)}}}),delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this.setValues(e)}function g(){return{name:n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,specularGlossinessParams:["color","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissive","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalMapType","displacementMap","displacementScale","displacementBias","specularMap","specular","glossinessMap","glossiness","alphaMap","envMap","envMapIntensity","refractionRatio"],getMaterialType:function(){return v},extendParams:function(e,t,n){var s=t.extensions[this.name];e.color=new r.k(1,1,1),e.opacity=1;var o=[];if(Array.isArray(s.diffuseFactor)){var a=s.diffuseFactor;e.color.fromArray(a),e.opacity=a[3]}if(void 0!==s.diffuseTexture&&o.push(n.assignTexture(e,"map",s.diffuseTexture)),e.emissive=new r.k(0,0,0),e.glossiness=void 0!==s.glossinessFactor?s.glossinessFactor:1,e.specular=new r.k(1,1,1),Array.isArray(s.specularFactor)&&e.specular.fromArray(s.specularFactor),void 0!==s.specularGlossinessTexture){var i=s.specularGlossinessTexture;o.push(n.assignTexture(e,"glossinessMap",i)),o.push(n.assignTexture(e,"specularMap",i))}return Promise.all(o)},createMaterial:function(e){var t=new v(e);return t.fog=!0,t.color=e.color,t.map=void 0===e.map?null:e.map,t.lightMap=null,t.lightMapIntensity=1,t.aoMap=void 0===e.aoMap?null:e.aoMap,t.aoMapIntensity=1,t.emissive=e.emissive,t.emissiveIntensity=1,t.emissiveMap=void 0===e.emissiveMap?null:e.emissiveMap,t.bumpMap=void 0===e.bumpMap?null:e.bumpMap,t.bumpScale=1,t.normalMap=void 0===e.normalMap?null:e.normalMap,t.normalMapType=r.ob,e.normalScale&&(t.normalScale=e.normalScale),t.displacementMap=null,t.displacementScale=1,t.displacementBias=0,t.specularMap=void 0===e.specularMap?null:e.specularMap,t.specular=e.specular,t.glossinessMap=void 0===e.glossinessMap?null:e.glossinessMap,t.glossiness=e.glossiness,t.alphaMap=null,t.envMap=void 0===e.envMap?null:e.envMap,t.envMapIntensity=1,t.refractionRatio=.98,t}}}function y(){this.name=n.KHR_MESH_QUANTIZATION}function b(e,t,n,s){r.w.call(this,e,t,n,s)}m.prototype.decodePrimitive=function(e,t){var n=this.json,r=this.dracoLoader,s=e.extensions[this.name].bufferView,o=e.extensions[this.name].attributes,a={},i={},l={};for(var c in o){var u=O[c]||c.toLowerCase();a[u]=o[c]}for(c in e.attributes){u=O[c]||c.toLowerCase();if(void 0!==o[c]){var d=n.accessors[e.attributes[c]],p=_[d.componentType];l[u]=p,i[u]=!0===d.normalized}}return t.getDependency("bufferView",s).then((function(e){return new Promise((function(t){r.decodeDracoFile(e,(function(e){for(var n in e.attributes){var r=e.attributes[n],s=i[n];void 0!==s&&(r.normalized=s)}t(e)}),a,l)}))}))},f.prototype.extendTexture=function(e,t){return e=e.clone(),void 0!==t.offset&&e.offset.fromArray(t.offset),void 0!==t.rotation&&(e.rotation=t.rotation),void 0!==t.scale&&e.repeat.fromArray(t.scale),void 0!==t.texCoord&&console.warn('THREE.GLTFLoader: Custom UV sets in "'+this.name+'" extension not yet supported.'),e.needsUpdate=!0,e},v.prototype=Object.create(r.Q.prototype),v.prototype.constructor=v,v.prototype.copy=function(e){return r.Q.prototype.copy.call(this,e),this.specularMap=e.specularMap,this.specular.copy(e.specular),this.glossinessMap=e.glossinessMap,this.glossiness=e.glossiness,delete this.metalness,delete this.roughness,delete this.metalnessMap,delete this.roughnessMap,this},b.prototype=Object.create(r.w.prototype),b.prototype.constructor=b,b.prototype.copySampleValue_=function(e){for(var t=this.resultBuffer,n=this.sampleValues,r=this.valueSize,s=e*r*3+r,o=0;o!==r;o++)t[o]=n[s+o];return t},b.prototype.beforeStart_=b.prototype.copySampleValue_,b.prototype.afterEnd_=b.prototype.copySampleValue_,b.prototype.interpolate_=function(e,t,n,r){for(var s=this.resultBuffer,o=this.sampleValues,a=this.valueSize,i=2*a,l=3*a,c=r-t,u=(n-t)/c,d=u*u,p=d*u,h=e*l,m=h-l,f=-2*p+3*d,v=p-d,g=1-f,y=v-d+u,b=0;b!==a;b++){var T=o[m+b+a],w=o[m+b+i]*c,S=o[h+b+a],E=o[h+b]*c;s[b]=g*T+y*w+f*S+v*E}return s};var T=0,w=1,S=2,E=3,x=4,R=5,M=6,_={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},L={9728:r.S,9729:r.D,9984:r.U,9985:r.F,9986:r.T,9987:r.E},I={33071:r.i,33648:r.R,10497:r.ib},A={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},O={POSITION:"position",NORMAL:"normal",TANGENT:"tangent",TEXCOORD_0:"uv",TEXCOORD_1:"uv2",COLOR_0:"color",WEIGHTS_0:"skinWeight",JOINTS_0:"skinIndex"},N={scale:"scale",translation:"position",rotation:"quaternion",weights:"morphTargetInfluences"},P={CUBICSPLINE:void 0,LINEAR:r.y,STEP:r.x},U="OPAQUE",k="MASK",C="BLEND";function D(e,t){return"string"!=typeof e||""===e?"":(/^https?:\/\//i.test(t)&&/^\//.test(e)&&(t=t.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(e)||/^data:.*,.*$/i.test(e)||/^blob:.*$/i.test(e)?e:t+e)}function H(e,t,n){for(var r in n.extensions)void 0===e[r]&&(t.userData.gltfExtensions=t.userData.gltfExtensions||{},t.userData.gltfExtensions[r]=n.extensions[r])}function F(e,t){void 0!==t.extras&&("object"==typeof t.extras?Object.assign(e.userData,t.extras):console.warn("THREE.GLTFLoader: Ignoring primitive type .extras, "+t.extras))}function G(e,t){if(e.updateMorphTargets(),void 0!==t.weights)for(var n=0,r=t.weights.length;n<r;n++)e.morphTargetInfluences[n]=t.weights[n];if(t.extras&&Array.isArray(t.extras.targetNames)){var s=t.extras.targetNames;if(e.morphTargetInfluences.length===s.length){e.morphTargetDictionary={};for(n=0,r=s.length;n<r;n++)e.morphTargetDictionary[s[n]]=n}else console.warn("THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.")}}function j(e){for(var t="",n=Object.keys(e).sort(),r=0,s=n.length;r<s;r++)t+=n[r]+":"+e[n[r]]+";";return t}function B(e,n){this.json=e||{},this.extensions={},this.plugins={},this.options=n||{},this.cache=new t,this.associations=new Map,this.primitiveCache={},this.meshCache={refs:{},uses:{}},this.cameraCache={refs:{},uses:{}},this.lightCache={refs:{},uses:{}},this.nodeNamesUsed={},"undefined"!=typeof createImageBitmap&&!1===/Firefox/.test(navigator.userAgent)?this.textureLoader=new r.t(this.options.manager):this.textureLoader=new r.pb(this.options.manager),this.textureLoader.setCrossOrigin(this.options.crossOrigin),this.fileLoader=new r.p(this.options.manager),this.fileLoader.setResponseType("arraybuffer"),"use-credentials"===this.options.crossOrigin&&this.fileLoader.setWithCredentials(!0)}function K(e,t,n){var s=t.attributes,o=[];function a(t,r){return n.getDependency("accessor",t).then((function(t){e.setAttribute(r,t)}))}for(var i in s){var l=O[i]||i.toLowerCase();l in e.attributes||o.push(a(s[i],l))}if(void 0!==t.indices&&!e.index){var c=n.getDependency("accessor",t.indices).then((function(t){e.setIndex(t)}));o.push(c)}return F(e,t),function(e,t,n){var s=t.attributes,o=new r.d;if(void 0!==s.POSITION){var a=(m=n.json.accessors[s.POSITION]).min,i=m.max;if(void 0!==a&&void 0!==i){o.set(new r.tb(a[0],a[1],a[2]),new r.tb(i[0],i[1],i[2]));var l=t.targets;if(void 0!==l){for(var c=new r.tb,u=new r.tb,d=0,p=l.length;d<p;d++){var h=l[d];if(void 0!==h.POSITION){var m;a=(m=n.json.accessors[h.POSITION]).min,i=m.max;void 0!==a&&void 0!==i?(u.setX(Math.max(Math.abs(a[0]),Math.abs(i[0]))),u.setY(Math.max(Math.abs(a[1]),Math.abs(i[1]))),u.setZ(Math.max(Math.abs(a[2]),Math.abs(i[2]))),c.max(u)):console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}o.expandByVector(c)}e.boundingBox=o;var f=new r.mb;o.getCenter(f.center),f.radius=o.min.distanceTo(o.max)/2,e.boundingSphere=f}else console.warn("THREE.GLTFLoader: Missing min/max properties for accessor POSITION.")}}(e,t,n),Promise.all(o).then((function(){return void 0!==t.targets?function(e,t,n){for(var r=!1,s=!1,o=0,a=t.length;o<a;o++){if(void 0!==(c=t[o]).POSITION&&(r=!0),void 0!==c.NORMAL&&(s=!0),r&&s)break}if(!r&&!s)return Promise.resolve(e);var i=[],l=[];for(o=0,a=t.length;o<a;o++){var c=t[o];if(r){var u=void 0!==c.POSITION?n.getDependency("accessor",c.POSITION):e.attributes.position;i.push(u)}if(s){u=void 0!==c.NORMAL?n.getDependency("accessor",c.NORMAL):e.attributes.normal;l.push(u)}}return Promise.all([Promise.all(i),Promise.all(l)]).then((function(t){var n=t[0],o=t[1];return r&&(e.morphAttributes.position=n),s&&(e.morphAttributes.normal=o),e.morphTargetsRelative=!0,e}))}(e,t.targets,n):e}))}function V(e,t){var n=e.getIndex();if(null===n){var s=[],o=e.getAttribute("position");if(void 0===o)return console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Undefined position attribute. Processing not possible."),e;for(var a=0;a<o.count;a++)s.push(a);e.setIndex(s),n=e.getIndex()}var i=n.count-2,l=[];if(t===r.qb)for(a=1;a<=i;a++)l.push(n.getX(0)),l.push(n.getX(a)),l.push(n.getX(a+1));else for(a=0;a<i;a++)a%2==0?(l.push(n.getX(a)),l.push(n.getX(a+1)),l.push(n.getX(a+2))):(l.push(n.getX(a+2)),l.push(n.getX(a+1)),l.push(n.getX(a)));l.length/3!==i&&console.error("THREE.GLTFLoader.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");var c=e.clone();return c.setIndex(l),c}return B.prototype.setExtensions=function(e){this.extensions=e},B.prototype.setPlugins=function(e){this.plugins=e},B.prototype.parse=function(e,t){var n=this,r=this.json,s=this.extensions;this.cache.removeAll(),this._invokeAll((function(e){return e._markDefs&&e._markDefs()})),Promise.all([this.getDependencies("scene"),this.getDependencies("animation"),this.getDependencies("camera")]).then((function(t){var o={scene:t[0][r.scene||0],scenes:t[0],animations:t[1],cameras:t[2],asset:r.asset,parser:n,userData:{}};H(s,o,r),F(o,r),e(o)})).catch(t)},B.prototype._markDefs=function(){for(var e=this.json.nodes||[],t=this.json.skins||[],n=this.json.meshes||[],r=0,s=t.length;r<s;r++)for(var o=t[r].joints,a=0,i=o.length;a<i;a++)e[o[a]].isBone=!0;for(var l=0,c=e.length;l<c;l++){var u=e[l];void 0!==u.mesh&&(this._addNodeRef(this.meshCache,u.mesh),void 0!==u.skin&&(n[u.mesh].isSkinnedMesh=!0)),void 0!==u.camera&&this._addNodeRef(this.cameraCache,u.camera)}},B.prototype._addNodeRef=function(e,t){void 0!==t&&(void 0===e.refs[t]&&(e.refs[t]=e.uses[t]=0),e.refs[t]++)},B.prototype._getNodeRef=function(e,t,n){if(e.refs[t]<=1)return n;var r=n.clone();return r.name+="_instance_"+e.uses[t]++,r},B.prototype._invokeOne=function(e){var t=Object.values(this.plugins);t.push(this);for(var n=0;n<t.length;n++){var r=e(t[n]);if(r)return r}},B.prototype._invokeAll=function(e){var t=Object.values(this.plugins);t.unshift(this);for(var n=[],r=0;r<t.length;r++){var s=e(t[r]);s&&n.push(s)}return n},B.prototype.getDependency=function(e,t){var n=e+":"+t,r=this.cache.get(n);if(!r){switch(e){case"scene":r=this.loadScene(t);break;case"node":r=this.loadNode(t);break;case"mesh":r=this._invokeOne((function(e){return e.loadMesh&&e.loadMesh(t)}));break;case"accessor":r=this.loadAccessor(t);break;case"bufferView":r=this._invokeOne((function(e){return e.loadBufferView&&e.loadBufferView(t)}));break;case"buffer":r=this.loadBuffer(t);break;case"material":r=this._invokeOne((function(e){return e.loadMaterial&&e.loadMaterial(t)}));break;case"texture":r=this._invokeOne((function(e){return e.loadTexture&&e.loadTexture(t)}));break;case"skin":r=this.loadSkin(t);break;case"animation":r=this.loadAnimation(t);break;case"camera":r=this.loadCamera(t);break;default:throw new Error("Unknown type: "+e)}this.cache.add(n,r)}return r},B.prototype.getDependencies=function(e){var t=this.cache.get(e);if(!t){var n=this,r=this.json[e+("mesh"===e?"es":"s")]||[];t=Promise.all(r.map((function(t,r){return n.getDependency(e,r)}))),this.cache.add(e,t)}return t},B.prototype.loadBuffer=function(e){var t=this.json.buffers[e],r=this.fileLoader;if(t.type&&"arraybuffer"!==t.type)throw new Error("THREE.GLTFLoader: "+t.type+" buffer type is not supported.");if(void 0===t.uri&&0===e)return Promise.resolve(this.extensions[n.KHR_BINARY_GLTF].body);var s=this.options;return new Promise((function(e,n){r.load(D(t.uri,s.path),e,void 0,(function(){n(new Error('THREE.GLTFLoader: Failed to load buffer "'+t.uri+'".'))}))}))},B.prototype.loadBufferView=function(e){var t=this.json.bufferViews[e];return this.getDependency("buffer",t.buffer).then((function(e){var n=t.byteLength||0,r=t.byteOffset||0;return e.slice(r,r+n)}))},B.prototype.loadAccessor=function(e){var t=this,n=this.json,s=this.json.accessors[e];if(void 0===s.bufferView&&void 0===s.sparse)return Promise.resolve(null);var o=[];return void 0!==s.bufferView?o.push(this.getDependency("bufferView",s.bufferView)):o.push(null),void 0!==s.sparse&&(o.push(this.getDependency("bufferView",s.sparse.indices.bufferView)),o.push(this.getDependency("bufferView",s.sparse.values.bufferView))),Promise.all(o).then((function(e){var o,a,i=e[0],l=A[s.type],c=_[s.componentType],u=c.BYTES_PER_ELEMENT,d=u*l,p=s.byteOffset||0,h=void 0!==s.bufferView?n.bufferViews[s.bufferView].byteStride:void 0,m=!0===s.normalized;if(h&&h!==d){var f=Math.floor(p/h),v="InterleavedBuffer:"+s.bufferView+":"+s.componentType+":"+f+":"+s.count,g=t.cache.get(v);g||(o=new c(i,f*h,s.count*h/u),g=new r.u(o,h/u),t.cache.add(v,g)),a=new r.v(g,l,p%h/u,m)}else o=null===i?new c(s.count*l):new c(i,p,s.count*l),a=new r.f(o,l,m);if(void 0!==s.sparse){var y=A.SCALAR,b=_[s.sparse.indices.componentType],T=s.sparse.indices.byteOffset||0,w=s.sparse.values.byteOffset||0,S=new b(e[1],T,s.sparse.count*y),E=new c(e[2],w,s.sparse.count*l);null!==i&&(a=new r.f(a.array.slice(),a.itemSize,a.normalized));for(var x=0,R=S.length;x<R;x++){var M=S[x];if(a.setX(M,E[x*l]),l>=2&&a.setY(M,E[x*l+1]),l>=3&&a.setZ(M,E[x*l+2]),l>=4&&a.setW(M,E[x*l+3]),l>=5)throw new Error("THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.")}}return a}))},B.prototype.loadTexture=function(e){var t,r,s=this.json,o=this.options,a=s.textures[e],i=a.extensions||{};return(t=i[n.MSFT_TEXTURE_DDS]?s.images[i[n.MSFT_TEXTURE_DDS].source]:s.images[a.source]).uri&&(r=o.manager.getHandler(t.uri)),r||(r=i[n.MSFT_TEXTURE_DDS]?this.extensions[n.MSFT_TEXTURE_DDS].ddsLoader:this.textureLoader),this.loadTextureImage(e,t,r)},B.prototype.loadTextureImage=function(e,t,n){var s=this,o=this.json,a=this.options,i=o.textures[e],l=self.URL||self.webkitURL,c=t.uri,u=!1,d=!0;return"image/jpeg"===t.mimeType&&(d=!1),void 0!==t.bufferView&&(c=s.getDependency("bufferView",t.bufferView).then((function(e){if("image/png"===t.mimeType){var n=new DataView(e,25,1).getUint8(0,!1);d=6===n||4===n||3===n}u=!0;var r=new Blob([e],{type:t.mimeType});return c=l.createObjectURL(r)}))),Promise.resolve(c).then((function(e){return new Promise((function(t,s){var o=t;!0===n.isImageBitmapLoader&&(o=function(e){t(new r.h(e))}),n.load(D(e,a.path),o,void 0,s)}))})).then((function(t){!0===u&&l.revokeObjectURL(c),t.flipY=!1,i.name&&(t.name=i.name),d||(t.format=r.gb);var n=(o.samplers||{})[i.sampler]||{};return t.magFilter=L[n.magFilter]||r.D,t.minFilter=L[n.minFilter]||r.E,t.wrapS=I[n.wrapS]||r.ib,t.wrapT=I[n.wrapT]||r.ib,s.associations.set(t,{type:"textures",index:e}),t}))},B.prototype.assignTexture=function(e,t,r){var s=this;return this.getDependency("texture",r.index).then((function(o){if(void 0===r.texCoord||0==r.texCoord||"aoMap"===t&&1==r.texCoord||console.warn("THREE.GLTFLoader: Custom UV set "+r.texCoord+" for texture "+t+" not yet supported."),s.extensions[n.KHR_TEXTURE_TRANSFORM]){var a=void 0!==r.extensions?r.extensions[n.KHR_TEXTURE_TRANSFORM]:void 0;if(a){var i=s.associations.get(o);o=s.extensions[n.KHR_TEXTURE_TRANSFORM].extendTexture(o,a),s.associations.set(o,i)}}e[t]=o}))},B.prototype.assignFinalMaterial=function(e){var t=e.geometry,n=e.material,s=void 0!==t.attributes.tangent,o=void 0!==t.attributes.color,a=void 0===t.attributes.normal,i=!0===e.isSkinnedMesh,l=Object.keys(t.morphAttributes).length>0,c=l&&void 0!==t.morphAttributes.normal;if(e.isPoints){var u="PointsMaterial:"+n.uuid,d=this.cache.get(u);d||(d=new r.db,r.I.prototype.copy.call(d,n),d.color.copy(n.color),d.map=n.map,d.sizeAttenuation=!1,this.cache.add(u,d)),n=d}else if(e.isLine){u="LineBasicMaterial:"+n.uuid;var p=this.cache.get(u);p||(p=new r.A,r.I.prototype.copy.call(p,n),p.color.copy(n.color),this.cache.add(u,p)),n=p}if(s||o||a||i||l){u="ClonedMaterial:"+n.uuid+":";n.isGLTFSpecularGlossinessMaterial&&(u+="specular-glossiness:"),i&&(u+="skinning:"),s&&(u+="vertex-tangents:"),o&&(u+="vertex-colors:"),a&&(u+="flat-shading:"),l&&(u+="morph-targets:"),c&&(u+="morph-normals:");var h=this.cache.get(u);h||(h=n.clone(),i&&(h.skinning=!0),s&&(h.vertexTangents=!0),o&&(h.vertexColors=!0),a&&(h.flatShading=!0),l&&(h.morphTargets=!0),c&&(h.morphNormals=!0),this.cache.add(u,h),this.associations.set(h,this.associations.get(n))),n=h}n.aoMap&&void 0===t.attributes.uv2&&void 0!==t.attributes.uv&&t.setAttribute("uv2",t.attributes.uv),n.normalScale&&!s&&(n.normalScale.y=-n.normalScale.y),n.clearcoatNormalScale&&!s&&(n.clearcoatNormalScale.y=-n.clearcoatNormalScale.y),e.material=n},B.prototype.getMaterialType=function(){return r.Q},B.prototype.loadMaterial=function(e){var t,s=this,o=this.json,a=this.extensions,i=o.materials[e],l={},c=i.extensions||{},u=[];if(c[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]){var d=a[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];t=d.getMaterialType(),u.push(d.extendParams(l,i,s))}else if(c[n.KHR_MATERIALS_UNLIT]){var p=a[n.KHR_MATERIALS_UNLIT];t=p.getMaterialType(),u.push(p.extendParams(l,i,s))}else{var h=i.pbrMetallicRoughness||{};if(l.color=new r.k(1,1,1),l.opacity=1,Array.isArray(h.baseColorFactor)){var m=h.baseColorFactor;l.color.fromArray(m),l.opacity=m[3]}void 0!==h.baseColorTexture&&u.push(s.assignTexture(l,"map",h.baseColorTexture)),l.metalness=void 0!==h.metallicFactor?h.metallicFactor:1,l.roughness=void 0!==h.roughnessFactor?h.roughnessFactor:1,void 0!==h.metallicRoughnessTexture&&(u.push(s.assignTexture(l,"metalnessMap",h.metallicRoughnessTexture)),u.push(s.assignTexture(l,"roughnessMap",h.metallicRoughnessTexture))),t=this._invokeOne((function(t){return t.getMaterialType&&t.getMaterialType(e)})),u.push(Promise.all(this._invokeAll((function(t){return t.extendMaterialParams&&t.extendMaterialParams(e,l)}))))}!0===i.doubleSided&&(l.side=r.m);var f=i.alphaMode||U;return f===C?(l.transparent=!0,l.depthWrite=!1):(l.transparent=!1,f===k&&(l.alphaTest=void 0!==i.alphaCutoff?i.alphaCutoff:.5)),void 0!==i.normalTexture&&t!==r.M&&(u.push(s.assignTexture(l,"normalMap",i.normalTexture)),l.normalScale=new r.sb(1,1),void 0!==i.normalTexture.scale&&l.normalScale.set(i.normalTexture.scale,i.normalTexture.scale)),void 0!==i.occlusionTexture&&t!==r.M&&(u.push(s.assignTexture(l,"aoMap",i.occlusionTexture)),void 0!==i.occlusionTexture.strength&&(l.aoMapIntensity=i.occlusionTexture.strength)),void 0!==i.emissiveFactor&&t!==r.M&&(l.emissive=(new r.k).fromArray(i.emissiveFactor)),void 0!==i.emissiveTexture&&t!==r.M&&u.push(s.assignTexture(l,"emissiveMap",i.emissiveTexture)),Promise.all(u).then((function(){var o;return o=t===v?a[n.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(l):new t(l),i.name&&(o.name=i.name),o.map&&(o.map.encoding=r.wb),o.emissiveMap&&(o.emissiveMap.encoding=r.wb),F(o,i),s.associations.set(o,{type:"materials",index:e}),i.extensions&&H(a,o,i),o}))},B.prototype.createUniqueName=function(e){for(var t=r.eb.sanitizeNodeName(e||""),n=1;this.nodeNamesUsed[t];++n)t=e+"_"+n;return this.nodeNamesUsed[t]=!0,t},B.prototype.loadGeometries=function(e){var t=this,s=this.extensions,o=this.primitiveCache;function a(e){return s[n.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(e,t).then((function(n){return K(n,e,t)}))}for(var i,l,c=[],u=0,d=e.length;u<d;u++){var p,h=e[u],m=(l=void 0,(l=(i=h).extensions&&i.extensions[n.KHR_DRACO_MESH_COMPRESSION])?"draco:"+l.bufferView+":"+l.indices+":"+j(l.attributes):i.indices+":"+j(i.attributes)+":"+i.mode),f=o[m];if(f)c.push(f.promise);else p=h.extensions&&h.extensions[n.KHR_DRACO_MESH_COMPRESSION]?a(h):K(new r.g,h,t),o[m]={primitive:h,promise:p},c.push(p)}return Promise.all(c)},B.prototype.loadMesh=function(e){for(var t,n=this,s=this.json.meshes[e],o=s.primitives,a=[],i=0,l=o.length;i<l;i++){var c=void 0===o[i].material?(void 0===(t=this.cache).DefaultMaterial&&(t.DefaultMaterial=new r.Q({color:16777215,emissive:0,metalness:1,roughness:1,transparent:!1,depthTest:!0,side:r.r})),t.DefaultMaterial):this.getDependency("material",o[i].material);a.push(c)}return a.push(n.loadGeometries(o)),Promise.all(a).then((function(t){for(var a=t.slice(0,t.length-1),i=t[t.length-1],l=[],c=0,u=i.length;c<u;c++){var d,p=i[c],h=o[c],m=a[c];if(h.mode===x||h.mode===R||h.mode===M||void 0===h.mode)!0!==(d=!0===s.isSkinnedMesh?new r.lb(p,m):new r.L(p,m)).isSkinnedMesh||d.geometry.attributes.skinWeight.normalized||d.normalizeSkinWeights(),h.mode===R?d.geometry=V(d.geometry,r.rb):h.mode===M&&(d.geometry=V(d.geometry,r.qb));else if(h.mode===w)d=new r.C(p,m);else if(h.mode===E)d=new r.z(p,m);else if(h.mode===S)d=new r.B(p,m);else{if(h.mode!==T)throw new Error("THREE.GLTFLoader: Primitive mode unsupported: "+h.mode);d=new r.cb(p,m)}Object.keys(d.geometry.morphAttributes).length>0&&G(d,s),d.name=n.createUniqueName(s.name||"mesh_"+e),i.length>1&&(d.name+="_"+c),F(d,s),n.assignFinalMaterial(d),l.push(d)}if(1===l.length)return l[0];var f=new r.s;for(c=0,u=l.length;c<u;c++)f.add(l[c]);return f}))},B.prototype.loadCamera=function(e){var t,n=this.json.cameras[e],s=n[n.type];if(s)return"perspective"===n.type?t=new r.Z(r.J.radToDeg(s.yfov),s.aspectRatio||1,s.znear||1,s.zfar||2e6):"orthographic"===n.type&&(t=new r.X(-s.xmag,s.xmag,s.ymag,-s.ymag,s.znear,s.zfar)),n.name&&(t.name=this.createUniqueName(n.name)),F(t,n),Promise.resolve(t);console.warn("THREE.GLTFLoader: Missing camera parameters.")},B.prototype.loadSkin=function(e){var t=this.json.skins[e],n={joints:t.joints};return void 0===t.inverseBindMatrices?Promise.resolve(n):this.getDependency("accessor",t.inverseBindMatrices).then((function(e){return n.inverseBindMatrices=e,n}))},B.prototype.loadAnimation=function(e){for(var t=this.json.animations[e],n=[],s=[],o=[],a=[],i=[],l=0,c=t.channels.length;l<c;l++){var u=t.channels[l],d=t.samplers[u.sampler],p=u.target,h=void 0!==p.node?p.node:p.id,m=void 0!==t.parameters?t.parameters[d.input]:d.input,f=void 0!==t.parameters?t.parameters[d.output]:d.output;n.push(this.getDependency("node",h)),s.push(this.getDependency("accessor",m)),o.push(this.getDependency("accessor",f)),a.push(d),i.push(p)}return Promise.all([Promise.all(n),Promise.all(s),Promise.all(o),Promise.all(a),Promise.all(i)]).then((function(n){for(var s=n[0],o=n[1],a=n[2],i=n[3],l=n[4],c=[],u=0,d=s.length;u<d;u++){var p=s[u],h=o[u],m=a[u],f=i[u],v=l[u];if(void 0!==p){var g;switch(p.updateMatrix(),p.matrixAutoUpdate=!0,N[v.path]){case N.weights:g=r.V;break;case N.rotation:g=r.fb;break;case N.position:case N.scale:default:g=r.ub}var y=p.name?p.name:p.uuid,T=void 0!==f.interpolation?P[f.interpolation]:r.y,w=[];N[v.path]===N.weights?p.traverse((function(e){!0===e.isMesh&&e.morphTargetInfluences&&w.push(e.name?e.name:e.uuid)})):w.push(y);var S=m.array;if(m.normalized){var E;if(S.constructor===Int8Array)E=1/127;else if(S.constructor===Uint8Array)E=1/255;else if(S.constructor==Int16Array)E=1/32767;else{if(S.constructor!==Uint16Array)throw new Error("THREE.GLTFLoader: Unsupported output accessor component type.");E=1/65535}for(var x=new Float32Array(S.length),R=0,M=S.length;R<M;R++)x[R]=S[R]*E;S=x}for(R=0,M=w.length;R<M;R++){var _=new g(w[R]+"."+N[v.path],h.array,S,T);"CUBICSPLINE"===f.interpolation&&(_.createInterpolant=function(e){return new b(this.times,this.values,this.getValueSize()/3,e)},_.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline=!0),c.push(_)}}}var L=t.name?t.name:"animation_"+e;return new r.b(L,void 0,c)}))},B.prototype.loadNode=function(e){var t,n=this.json,s=this.extensions,o=this,a=n.nodes[e],i=a.name?o.createUniqueName(a.name):"";return(t=[],void 0!==a.mesh&&t.push(o.getDependency("mesh",a.mesh).then((function(e){var t=o._getNodeRef(o.meshCache,a.mesh,e);return void 0!==a.weights&&t.traverse((function(e){if(e.isMesh)for(var t=0,n=a.weights.length;t<n;t++)e.morphTargetInfluences[t]=a.weights[t]})),t}))),void 0!==a.camera&&t.push(o.getDependency("camera",a.camera).then((function(e){return o._getNodeRef(o.cameraCache,a.camera,e)}))),o._invokeAll((function(t){return t.createNodeAttachment&&t.createNodeAttachment(e)})).forEach((function(e){t.push(e)})),Promise.all(t)).then((function(t){var n;if((n=!0===a.isBone?new r.c:t.length>1?new r.s:1===t.length?t[0]:new r.W)!==t[0])for(var l=0,c=t.length;l<c;l++)n.add(t[l]);if(a.name&&(n.userData.name=a.name,n.name=i),F(n,a),a.extensions&&H(s,n,a),void 0!==a.matrix){var u=new r.K;u.fromArray(a.matrix),n.applyMatrix4(u)}else void 0!==a.translation&&n.position.fromArray(a.translation),void 0!==a.rotation&&n.quaternion.fromArray(a.rotation),void 0!==a.scale&&n.scale.fromArray(a.scale);return o.associations.set(n,{type:"nodes",index:e}),n}))},B.prototype.loadScene=function(){function e(t,n,s,o){var a=s.nodes[t];return o.getDependency("node",t).then((function(e){return void 0===a.skin?e:o.getDependency("skin",a.skin).then((function(e){for(var n=[],r=0,s=(t=e).joints.length;r<s;r++)n.push(o.getDependency("node",t.joints[r]));return Promise.all(n)})).then((function(n){return e.traverse((function(e){if(e.isMesh){for(var s=[],o=[],a=0,i=n.length;a<i;a++){var l=n[a];if(l){s.push(l);var c=new r.K;void 0!==t.inverseBindMatrices&&c.fromArray(t.inverseBindMatrices.array,16*a),o.push(c)}else console.warn('THREE.GLTFLoader: Joint "%s" could not be found.',t.joints[a])}e.bind(new r.kb(s,o),e.matrixWorld)}})),e}));var t})).then((function(t){n.add(t);var r=[];if(a.children)for(var i=a.children,l=0,c=i.length;l<c;l++){var u=i[l];r.push(e(u,t,s,o))}return Promise.all(r)}))}return function(t){var n=this.json,s=this.extensions,o=this.json.scenes[t],a=new r.s;o.name&&(a.name=this.createUniqueName(o.name)),F(a,o),o.extensions&&H(s,a,o);for(var i=o.nodes||[],l=[],c=0,u=i.length;c<u;c++)l.push(e(i[c],a,n,this));return Promise.all(l).then((function(){return a}))}}(),e}(),o=function(e,t){void 0===t&&(console.warn('THREE.PointerLockControls: The second parameter "domElement" is now mandatory.'),t=document.body),this.domElement=t,this.isLocked=!1,this.minPolarAngle=0,this.maxPolarAngle=Math.PI;var n,s=this,o={type:"change"},a={type:"lock"},i={type:"unlock"},l=new r.n(0,0,0,"YXZ"),c=Math.PI/2,u=new r.tb;function d(t){if(!1!==s.isLocked){var n=t.movementX||t.mozMovementX||t.webkitMovementX||0,r=t.movementY||t.mozMovementY||t.webkitMovementY||0;l.setFromQuaternion(e.quaternion),l.y-=.002*n,l.x-=.002*r,l.x=Math.max(c-s.maxPolarAngle,Math.min(c-s.minPolarAngle,l.x)),e.quaternion.setFromEuler(l),s.dispatchEvent(o)}}function p(){s.domElement.ownerDocument.pointerLockElement===s.domElement?(s.dispatchEvent(a),s.isLocked=!0):(s.dispatchEvent(i),s.isLocked=!1)}function h(){console.error("THREE.PointerLockControls: Unable to use Pointer Lock API")}this.connect=function(){s.domElement.ownerDocument.addEventListener("mousemove",d,!1),s.domElement.ownerDocument.addEventListener("pointerlockchange",p,!1),s.domElement.ownerDocument.addEventListener("pointerlockerror",h,!1)},this.disconnect=function(){s.domElement.ownerDocument.removeEventListener("mousemove",d,!1),s.domElement.ownerDocument.removeEventListener("pointerlockchange",p,!1),s.domElement.ownerDocument.removeEventListener("pointerlockerror",h,!1)},this.dispose=function(){this.disconnect()},this.getObject=function(){return e},this.getDirection=(n=new r.tb(0,0,-1),function(t){return t.copy(n).applyQuaternion(e.quaternion)}),this.moveForward=function(t){u.setFromMatrixColumn(e.matrix,0),u.crossVectors(e.up,u),e.position.addScaledVector(u,t)},this.moveRight=function(t){u.setFromMatrixColumn(e.matrix,0),e.position.addScaledVector(u,t)},this.lock=function(){this.domElement.requestPointerLock()},this.unlock=function(){s.domElement.ownerDocument.exitPointerLock()},this.connect()};(o.prototype=Object.create(r.o.prototype)).constructor=o;var a={SCREEN_WIDTH:window.innerWidth,SCREEN_HEIGHT:window.innerHeight,BACKGROUND_COLOR:14217983,SUNSHINE_COLOR:15654053,WHITE:16777215,SIZE_GROUND:3e3,REAPEAT:64,N_TREE:300,N_CLOUDS:100,N_ANIMALS:10,INITAL_POSITION:{x:0,y:10,z:0},VISITOR:{color:14731677,movementSpeed:5,mass:100}};var i=class{constructor(e,t,n){this.imagePath=n,this.height=e,this.width=e,this.repeat=t,this._ground=null}create(){let e=(new r.pb).load(this.imagePath),t=new r.ab(this.height,this.width),n=new r.O({color:16777215,map:e}),s=new r.L(t,n);return s.rotation.x=-Math.PI/2,s.material.map.repeat.set(this.repeat,this.repeat),s.receiveShadow=!0,this._ground=s,s}};class l{constructor(e,t,n,r){this.geometry=e,this.color=t,this.position=n,this.scale=r}create(){let e=new r.N({color:this.color}),t=new r.L(this.geometry,e);return t.position.set(this.position[0],this.position[1],this.position[2]),t.scale.set(this.scale[0],this.scale[1],this.scale[2]),t}}function c(){let e=9561454,t=10682234,n=8215119,s=new r.e(1,1,1),o=new l(s,e,[.5,1.6,.5],[.8,.8,.8]);o=o.create();let a=new l(s,e,[-.4,1.3,-.4],[.7,.7,.7]);a=a.create();let i=new l(s,e,[.4,1.3,-.5],[.7,.7,.7]);i=i.create();let c=new l(s,e,[0,1.2,0],[1,2,1]);c=c.create();let u=new l(s,t,[0,1.2,0],[1.1,.5,1.1]);u=u.create();let d=new l(s,n,[0,0,0],[.3,1.5,.3]);d=d.create(),d.name="stem";let p=new r.s;return p.add(o),p.add(a),p.add(i),p.add(c),p.add(u),p.add(d),p}function u(e){(function(e){let t=[];const n=37/(a.SIZE_GROUND/50);for(let r=0;r<e;r++){let e=c(),r=50+50*Math.random(),s=Math.random()*(a.SIZE_GROUND-200)+(-a.SIZE_GROUND/2+100),o=n*(a.SIZE_GROUND/r),i=Math.random()*(-400-(a.SIZE_GROUND/2-100)-0)- -400;e.position.set(s,o,i),e.scale.set(a.SIZE_GROUND/r,a.SIZE_GROUND/r,a.SIZE_GROUND/r),t.push(e)}return t})(a.N_TREE).forEach(t=>{t.castShadow=!0,e.scene.add(t),e.collidableMeshList.push(t)})}var d=n.p+"2a4390562293c3c502f4999cc873d3d0.png";var p=n.p+"875aa0d47a51d44f79d5d4e042c36628.glb",h=n.p+"3121211aa0edd258000b825146e33a90.glb",m=n.p+"a1ad977363cc5a0396a5906495b47f41.glb",f=n.p+"b688b694e490d398b3fe86efe2c07dc6.glb";const v=[n.p+"7b143a0403cc09abc165bf86bd56e4d6.glb",n.p+"97dc77138db10b1782aab7ad55d4fb1b.glb",n.p+"cf87f94614876dc2908fe57b39d2133a.glb",n.p+"4e0c4ff8e652c1d8f8832df4ee4a9867.glb",n.p+"1e69926562e5e14f0db34d0f5fe2f322.glb",n.p+"1a28efbd57d9179b8eec354b0193e27b.glb",n.p+"9b93c6f42d2a1e6a89d29c0e3a34135f.glb",n.p+"af37f414d3859aa23fc5b46831f2dc00.glb",n.p+"a909f6d801819cb4ed03e779ea6a059c.glb"];var g=class{constructor(e,t,n,r){this.height=t,this.width=n,this.depth=r,this.color=e,this._visitor=null}create(){var e=new r.e(this.width,this.height,this.depth),t=new r.M({color:this.color}),n=new r.L(e,t);return this._visitor=n,n}};var y=function(){var e=0,t=document.createElement("div");function n(e){return t.appendChild(e.dom),e}function r(n){for(var r=0;r<t.children.length;r++)t.children[r].style.display=r===n?"block":"none";e=n}t.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",t.addEventListener("click",(function(n){n.preventDefault(),r(++e%t.children.length)}),!1);var s=(performance||Date).now(),o=s,a=0,i=n(new y.Panel("FPS","#0ff","#002")),l=n(new y.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var c=n(new y.Panel("MB","#f08","#201"));return r(0),{REVISION:16,dom:t,addPanel:n,showPanel:r,begin:function(){s=(performance||Date).now()},end:function(){a++;var e=(performance||Date).now();if(l.update(e-s,200),e>=o+1e3&&(i.update(1e3*a/(e-o),100),o=e,a=0,c)){var t=performance.memory;c.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){s=this.end()},domElement:t,setMode:r}};y.Panel=function(e,t,n){var r=1/0,s=0,o=Math.round,a=o(window.devicePixelRatio||1),i=80*a,l=48*a,c=3*a,u=2*a,d=3*a,p=15*a,h=74*a,m=30*a,f=document.createElement("canvas");f.width=i,f.height=l,f.style.cssText="width:80px;height:48px";var v=f.getContext("2d");return v.font="bold "+9*a+"px Helvetica,Arial,sans-serif",v.textBaseline="top",v.fillStyle=n,v.fillRect(0,0,i,l),v.fillStyle=t,v.fillText(e,c,u),v.fillRect(d,p,h,m),v.fillStyle=n,v.globalAlpha=.9,v.fillRect(d,p,h,m),{dom:f,update:function(l,g){r=Math.min(r,l),s=Math.max(s,l),v.fillStyle=n,v.globalAlpha=1,v.fillRect(0,0,i,p),v.fillStyle=t,v.fillText(o(l)+" "+e+" ("+o(r)+"-"+o(s)+")",c,u),v.drawImage(f,d+a,p,h-a,m,d,p,h-a,m),v.fillRect(d+h-a,p,a,m),v.fillStyle=n,v.globalAlpha=.9,v.fillRect(d+h-a,p,a,o((1-l/g)*m))}}};var b=y;var T=class{constructor(e,t,n,r,s){this.x=e,this.y=t,this.z=n,this.color=r,this.intensity=s,this._light=null}create(){let e=new r.l(this.color,this.intensity);return e.position.set(this.x,this.y,this.z),e.castShadow=!0,e.shadow.mapSize.width=1024,e.shadow.mapSize.height=512,e.shadow.camera.near=100,e.shadow.camera.far=1200,e.shadow.camera.left=-1e3,e.shadow.camera.right=1e3,e.shadow.camera.top=-350,e.shadow.camera.bottom=350,this._light=e,e}};let w,S=new r.j,E=new function(){this.camera=null,this.scene=null,this.renderer=null,this.controls=null,this.collidableMeshList=[],this.animals=[],this.onObjectRay=!1,this.move={moveForward:!1,moveBackward:!1,moveLeft:!1,moveRight:!1,canJump:!1},this.velocity=new r.tb,this.direction=new r.tb,this.visitor=null,this.container=null,this.prevPosition=null},x=new s;var R;E.onObjectRay=new r.hb(new r.tb,new r.tb(0,-1,0),0,10),E.container=document.body,document.getElementById("esc").style.display="none",(R=E).camera=new r.Z(45,a.SCREEN_WIDTH/a.SCREEN_HEIGHT,1,a.SIZE_GROUND),R.camera.position.set(a.INITAL_POSITION.x,a.INITAL_POSITION.y,a.INITAL_POSITION.z),function(e){e.scene=new r.jb,e.scene.background=new r.k(a.BACKGROUND_COLOR),e.scene.fog=new r.q(a.SUNSHINE_COLOR,1e3,4e3),e.scene.add(e.camera)}(E),function(e){e.scene.add(new r.a(a.SUNSHINE_COLOR));let t=new T(1e3,1e3,1e3,a.SUNSHINE_COLOR,1.5).create();e.scene.add(t)}(E),function(e){let t=new i(a.SIZE_GROUND,a.REAPEAT,d).create();e.scene.add(t)}(E),u(E),function(e){let t=new g(a.VISITOR.color,10,10,10).create();t.position.set(10,5,10),t.visible=!1,e.visitor=t,e.scene.add(t),e.camera.add(t)}(E),function(e,t){let n,r;t.load(p,t=>{n=t.scenes[0],n.scale.set(500,500,500),n.translateX(3e3),n.translateZ(950),e.scene.add(n),e.collidableMeshList.push(n)},void 0,e=>{console.error(e)}),t.load(h,t=>{r=t.scenes[0],r.scale.set(500,500,500),r.translateX(700),r.translateZ(1e3),e.scene.add(r),e.collidableMeshList.push(r)},void 0,e=>{console.error(e)}),t.load(h,t=>{r=t.scenes[0],e.scene.add(r),r.scale.set(500,500,500),r.translateX(-100),r.translateZ(1e3),e.collidableMeshList.push(r)},void 0,e=>{console.error(e)})}(E,x),function(e,t){let n;t.load(m,t=>{n=t.scenes[0],n.scale.set(100,100,100),n.position.set(1e3,1e3,1e3),e.scene.add(n)},void 0,e=>{console.error(e)})}(E,x),function(e,t){let n,r,s,o;for(let i=0;i<a.N_CLOUDS;i++)t.load(f,t=>{r=Math.random()*a.SIZE_GROUND+-a.SIZE_GROUND/2,s=500*Math.random()+500,o=Math.random()*a.SIZE_GROUND+-a.SIZE_GROUND/2,n=t.scenes[0],n.scale.set(100,100,100),n.position.set(r,s,o),e.scene.add(n)},void 0,e=>{console.error(e)})}(E,x),function(e,t){let n,r,s,o;for(let i=0;i<a.N_ANIMALS;i++)o=parseInt(Math.random()*v.length),t.load(v[o],t=>{r=Math.random()*(a.SIZE_GROUND-200)+(-a.SIZE_GROUND/2+100),s=Math.random()*(-400-(a.SIZE_GROUND/2-100)-0)- -400,n=t.scenes[0],n.scale.set(13,13,13),n.position.set(r,0,s),n.rotateY(Math.PI/2),e.scene.add(n),e.collidableMeshList.push(n),e.animals.push(n)},void 0,e=>{console.error(e)})}(E,x),function(e){e.renderer=new r.vb({antialias:!0}),e.renderer.setPixelRatio(window.devicePixelRatio),e.renderer.setSize(a.SCREEN_WIDTH,a.SCREEN_HEIGHT),e.container.appendChild(e.renderer.domElement),e.renderer.outputEncoding=r.wb,e.renderer.shadowMap.enabled=!0,e.renderer.shadowMap.type=r.Y}(E),function(e){window.addEventListener("resize",(function(){e.renderer.setSize(a.SCREEN_WIDTH,a.SCREEN_HEIGHT),e.camera.aspect=a.SCREEN_WIDTH/a.SCREEN_HEIGHT,e.camera.updateProjectionMatrix()}),!1)}(E),function(e){document.addEventListener("keydown",(function(t){switch(t.keyCode){case 38:case 87:e.move.moveForward=!0;break;case 37:case 65:e.move.moveLeft=!0;break;case 40:case 83:e.move.moveBackward=!0;break;case 39:case 68:e.move.moveRight=!0;break;case 32:!0===e.move.canJump&&(e.velocity.y+=350),e.move.canJump=!1}}),!1)}(E),function(e){document.addEventListener("keyup",(function(t){switch(event.keyCode){case 38:case 87:e.move.moveForward=!1;break;case 37:case 65:e.move.moveLeft=!1;break;case 40:case 83:e.move.moveBackward=!1;break;case 39:case 68:e.move.moveRight=!1}}),!1)}(E),E.controls=new o(E.camera,E.renderer.domElement),function(e){let t=document.getElementById("blocker"),n=document.getElementById("instructions"),r=document.getElementById("esc");n.addEventListener("click",(function(){e.controls.lock(),e.prevPosition&&e.controls.getObject().position.set(e.prevPosition.x,e.prevPosition.y,e.prevPosition.z)}),!1),e.controls.addEventListener("lock",(function(){n.style.display="none",t.style.display="none",r.style.display=""})),e.controls.addEventListener("unlock",(function(){e.prevPosition=e.controls.getObject().position,t.style.display="block",n.style.display="",r.style.display="none"}))}(E),w=new b,E.container.appendChild(w.dom),function e(){requestAnimationFrame(e),function(){if(!0===E.controls.isLocked){let e=S.getDelta();!function(e,t){Math.random();let n,s=new r.tb(1,0,0);for(let t=0;t<e.animals.length;t++)n=e.animals[t],n.position.addScaledVector(s,1),n.position.x>a.SIZE_GROUND/2&&(n.position.x=-a.SIZE_GROUND/2)}(E),function(e,t){e.velocity.x-=10*e.velocity.x*t,e.velocity.z-=10*e.velocity.z*t,e.velocity.y-=9.8*a.VISITOR.mass*t,e.direction.z=Number(e.move.moveForward)-Number(e.move.moveBackward),e.direction.x=Number(e.move.moveRight)-Number(e.move.moveLeft),e.direction.normalize(),(e.move.moveForward||e.move.moveBackward)&&(e.velocity.z-=400*e.direction.z*t),(e.move.moveLeft||e.move.moveRight)&&(e.velocity.x-=400*e.direction.x*t)}(E,e),function(e){if(e.onObjectRay.ray.origin.copy(e.controls.getObject().position),e.onObjectRay.ray.origin.y-=10,!0===e.onObjectRay.intersectObjects(e.collidableMeshList).length>0)e.velocity.y=Math.max(0,e.velocity.y),e.move.canJump=!0;else{e.visitor.position.copy(e.controls.getObject().position);let t=e.visitor.position.clone();for(let n=0;n<e.visitor.geometry.vertices.length;n++){let s=e.visitor.geometry.vertices[n].clone().applyMatrix4(e.visitor.matrix).sub(e.visitor.position),o=new r.hb(t,s.clone().normalize()).intersectObjects(e.collidableMeshList,!0);o.length>0&&o[0].distance<s.length()&&(e.velocity.x=Math.max(0,e.velocity.x),e.velocity.z=Math.max(0,e.velocity.z))}}}(E),function(e){let t=e.controls.getObject().position;(t.x+100>a.SIZE_GROUND/2||t.x-100<-a.SIZE_GROUND/2||t.z+100>a.SIZE_GROUND/2||t.z-100<-a.SIZE_GROUND/2)&&(e.velocity.x=Math.max(0,e.velocity.x),e.velocity.z=Math.max(0,e.velocity.z))}(E),function(e,t){e.controls.moveRight(-e.velocity.x*t*a.VISITOR.movementSpeed),e.controls.moveForward(-e.velocity.z*t*a.VISITOR.movementSpeed),e.controls.getObject().position.y+=e.velocity.y*t}(E,e),function(e){e.controls.getObject().position.y<a.INITAL_POSITION.y&&(e.velocity.y=0,e.controls.getObject().position.y=a.INITAL_POSITION.y,e.move.canJump=!0)}(E)}E.renderer.render(E.scene,E.camera)}(),w.update()}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,